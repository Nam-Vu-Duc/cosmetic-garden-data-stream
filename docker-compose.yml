services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: ecommerce_zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - kafka-net

  broker:
    image: confluentinc/cp-kafka:7.4.0
    container_name: ecommerce_broker
    hostname: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: unless-stopped
    networks:
      - kafka-net

  kafka-tools:
    image: confluentinc/cp-kafka:7.4.0
    container_name: ecommerce_kafka
    depends_on:
      broker:
        condition: service_healthy
    entrypoint: /bin/sh
    tty: true
    networks:
      - kafka-net

  flink-jobmanager:
    build:
      context: .
      dockerfile: Dockerfile.flink-python
    container_name: ecommerce_flink_job
    ports:
      - "8081:8081"
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
    command: jobmanager
    networks:
      - kafka-net
    volumes:
      - ./jars:/opt/flink/lib

  flink-taskmanager:
    build:
      context: .
      dockerfile: Dockerfile.flink-python
    container_name: ecommerce_flink_task
    depends_on:
      - flink-jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2
    command: taskmanager
    networks:
      - kafka-net
    volumes:
      - ./jars:/opt/flink/lib

  minio:
    image: minio/minio:latest
    container_name: ecommerce_minio
    ports:
      - "9000:9000"    # S3-compatible API
      - "9001:9001"    # Admin console UI
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - kafka-net

  createbucket:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      mc alias set local http://minio:9000 minioadmin minioadmin;
      mc mb local/ecommerce;
      mc policy set public local/ecommerce;
      exit 0;
      "
    networks:
      - kafka-net

  postgres:
    image: postgres:latest
    container_name: ecommerce_postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: admin
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - kafka-net

volumes:
  postgres-db-volume:
  minio-data:

networks:
  kafka-net:
    driver: bridge